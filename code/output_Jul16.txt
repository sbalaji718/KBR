Process ForkPoolWorker-3:
Traceback (most recent call last):
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/process.py", line 249, in _bootstrap
    self.run()
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/pool.py", line 108, in worker
    task = get()
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/queues.py", line 343, in get
    res = self._reader.recv_bytes()
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/connection.py", line 407, in _recv_bytes
    buf = self._recv(4)
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
/home/ahermosillo/.conda/envs/myenv/lib/python3.6/site-packages/rebound/simulation.py:675: RuntimeWarning: WHFast convergence issue. Timestep is larger than at least one orbital period.
  warnings.warn(msg[1:], RuntimeWarning)
Traceback (most recent call last):
  File "migrate.py", line 49, in <module>
    results = pool.map(do_integration,args)
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/pool.py", line 260, in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/pool.py", line 602, in get
    self.wait(timeout)
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/multiprocessing/pool.py", line 599, in wait
    self._event.wait(timeout)
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/threading.py", line 551, in wait
    signaled = self._cond.wait(timeout)
  File "/home/ahermosillo/.conda/envs/myenv/lib/python3.6/threading.py", line 295, in wait
    waiter.acquire()
KeyboardInterrupt
